class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        //step1 sort
        

int n=nums.size();
        if(n==0){
            return nums;
        }
sort(nums.begin(),nums.end());
vector<int> dp(n,1);//
vector<int>preInd(n,-1);//to store previous indexes
int maxInd=0;
for(int i=1;i<n;i++){
  for(int j=0;j<i;j++){
    if(nums[i]%nums[j]==0 && dp[i]<dp[j]+1){
      dp[i]=dp[j]+1;
      preInd[i]=j;
    }
    if(dp[maxInd] < dp[i]){
      maxInd=i;
    }
  }
}

//step 3 add all previos index in new vector
vector<int> res;
int t=maxInd;
while(t>=0){
  res.push_back(nums[t]);
  t=preInd[t];
}
return res;

    }
};
