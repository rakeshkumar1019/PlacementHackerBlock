/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int hight(TreeNode* root){
  if(root==NULL){
    return 0;
  }
  int opt1=1+hight(root->left);
  int opt2=1+hight(root->right);
  return max(opt1,opt2);
}
    int diameterOfBinaryTree(TreeNode* root) {
          if(root==NULL){
    return 0;
  }
  int opt1=hight(root->left)+hight(root->right);
  int opt2=diameterOfBinaryTree(root->left);
  int opt3=diameterOfBinaryTree(root->right);
  cout<<opt1<<":"<<opt2<<":"<<opt3<<endl;
  return max(opt1,max(opt2,opt3));
    }
};
